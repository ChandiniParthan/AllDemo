name: MyProject CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_ENV: production

    steps:
    # Optimization: Checkout code using the latest stable version of the action
    - name: Checkout code
      uses: actions/checkout@v3

    # Optimization: Cache Maven dependencies to speed up the build process
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Optimization: Set up Java using the latest stable version of the action
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'

    # Optimization: Combine build and test steps to reduce the number of job steps
    - name: Build and Test with Maven
      run: mvn clean install && mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      BUILD_ENV: production

    steps:
    # Optimization: Deploy to production using a single step
    - name: Deploy to Production
      run: ./deploy.sh

  post:
    runs-on: ubuntu-latest
    needs: [build, deploy]

    steps:
    # Optimization: Archive artifacts only if the build was successful
    - name: Archive Artifacts
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: JAR Files
        path: '**/target/*.jar'

    # Optimization: Publish test results only if the tests were run
    - name: Publish Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Test Reports
        path: 'reports/**/*.xml'

    # Optimization: Notify success or failure using a single step with conditional output
    - name: Notify Result
      run: echo "Pipeline ${{ job.status }}!"