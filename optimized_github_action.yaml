name: MyProject CI/CD

on:
  push:
    branches:
      - main

env:
  REGISTRY: docker.io/myorg
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      # Optimization: Fetch only the latest commit to reduce checkout time
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

  build_and_test:
    runs-on: ubuntu-latest
    needs: checkout
    strategy:
      matrix:
        service: [serviceA, serviceB]
    steps:
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Build and Test Service ${{ matrix.service }}
        run: |
          echo "Building and Testing Service ${{ matrix.service }}..."
          cd ${{ matrix.service }}
          ./gradlew build
          ./gradlew test

  dockerize:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Images
        run: |
          echo "Building Docker Images..."
          docker-compose build

  push_docker_images:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      # Optimization: Reuse Docker login step to avoid redundancy
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Images
        run: |
          echo "Pushing Docker Images to Registry..."
          docker tag service-a ${{ env.REGISTRY }}/service-a:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/service-a:${{ env.IMAGE_TAG }}
          docker tag service-b ${{ env.REGISTRY }}/service-b:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/service-b:${{ env.IMAGE_TAG }}

  deploy_to_staging:
    runs-on: ubuntu-latest
    needs: push_docker_images
    steps:
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Staging
        run: |
          echo "Deploying to Staging Environment..."
          kubectl apply -f staging/deployment.yaml

  post:
    runs-on: ubuntu-latest
    steps:
      - name: Always
        run: echo "Pipeline finished."

      - name: Success
        if: success()
        run: echo "Pipeline succeeded!"

      - name: Failure
        if: failure()
        run: echo "Pipeline failed!"