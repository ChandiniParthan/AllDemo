name: MyProject CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_ENV: production

    steps:
    # Optimization: Checkout code is necessary to fetch the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Optimization: Cache Maven dependencies to speed up the build process
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Optimization: Set up Java environment
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    # Optimization: Build the project using Maven
    - name: Build with Maven
      run: mvn clean install

    # Optimization: Run tests using Maven
    - name: Test with Maven
      run: mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      BUILD_ENV: production

    steps:
    # Optimization: Deploy to production environment
    - name: Deploy to Production
      run: ./deploy.sh

  post:
    runs-on: ubuntu-latest
    needs: [build, deploy]

    steps:
    # Optimization: Archive artifacts for future reference
    - name: Archive Artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: JAR Files
        path: '**/target/*.jar'

    # Optimization: Publish test results for analysis
    - name: Publish Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Test Reports
        path: 'reports/**/*.xml'

    # Optimization: Notify success if the pipeline succeeds
    - name: Notify Success
      if: success()
      run: echo 'Pipeline succeeded!'

    # Optimization: Notify failure if the pipeline fails
    - name: Notify Failure
      if: failure()
      run: echo 'Pipeline failed.'