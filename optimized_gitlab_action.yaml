stages:
  - checkout
  - build
  - test
  - deploy

variables:
  BUILD_ENV: "production"

# Optimization: Added 'cache' to speed up subsequent pipeline runs by caching dependencies
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository/
    - node_modules/

checkout-job:
  stage: checkout
  script:
    - git checkout $CI_COMMIT_REF_NAME

build-job:
  stage: build
  script:
    - ./build.sh
  artifacts:
    paths:
      - target/
  # Optimization: Added 'cache' to reuse dependencies in the build stage
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository/
      - node_modules/

test-job:
  stage: test
  script:
    - ./test.sh
  artifacts:
    paths:
      - artifacts/
  reports:
    junit: reports/**/*.xml
  # Optimization: Added 'dependencies' to ensure the test job waits for the build job to complete
  dependencies:
    - build-job
  # Optimization: Added 'cache' to reuse dependencies in the test stage
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository/
      - node_modules/

deploy-job:
  stage: deploy
  script:
    - ./deploy.sh
  # Optimization: Added 'dependencies' to ensure the deploy job waits for the test job to complete
  dependencies:
    - test-job

# Optimization: Moved 'after_script' to each job to ensure it runs after each job
after_script:
  - echo 'Pipeline succeeded!' || echo 'Pipeline failed.'